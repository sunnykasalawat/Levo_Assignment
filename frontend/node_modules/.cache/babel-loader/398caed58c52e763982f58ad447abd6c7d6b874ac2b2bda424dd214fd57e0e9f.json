{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sunny.kasalawat\\\\Desktop\\\\LEVO ASSIGNMENT\\\\frontend\\\\src\\\\Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport './Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calendar() {\n  _s();\n  // Fetch events based on the selected date range\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/api/events?start_date=${startDate.toISOString().split('T')[0]}&end_date=${endDate.toISOString().split('T')[0]}`);\n        if (response.ok) {\n          const eventsData = await response.json();\n          setEvents(eventsData);\n        } else {\n          console.error('Failed to fetch events');\n        }\n      } catch (error) {\n        console.error('Error fetching events:', error);\n      }\n    };\n    fetchEvents();\n  }, [startDate, endDate]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const eventData = {\n      title,\n      description,\n      start_date: startDate.toISOString().split('T')[0],\n      end_date: endDate.toISOString().split('T')[0],\n      emails\n    };\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(eventData)\n      });\n      if (response.ok) {\n        alert('Event created successfully!');\n        setTitle('');\n        setDescription('');\n        setStartDate(new Date());\n        setEndDate(new Date());\n        setEmails('');\n        // Re-fetch events to include the newly created event\n        const fetchEvents = async () => {\n          try {\n            const response = await fetch(`http://127.0.0.1:5000/api/events?start_date=${startDate.toISOString().split('T')[0]}&end_date=${endDate.toISOString().split('T')[0]}`);\n            if (response.ok) {\n              const eventsData = await response.json();\n              setEvents(eventsData);\n            } else {\n              console.error('Failed to fetch events');\n            }\n          } catch (error) {\n            console.error('Error fetching events:', error);\n          }\n        };\n        fetchEvents();\n      } else {\n        const errorData = await response.json();\n        alert(`Failed to create event: ${errorData.error}`);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"full-calendar-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"calendar-title\",\n        children: \"Monthly Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin],\n        initialView: \"dayGridMonth\",\n        height: \"auto\",\n        events: events.map(event => ({\n          title: event.title,\n          start: event.start_date,\n          end: event.end_date\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"event-list-title\",\n        children: \"Event List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-list-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-list-item-title\",\n          children: event.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-list-item-date\",\n          children: [new Date(event.start_date).toLocaleDateString(), \" - \", new Date(event.end_date).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-list-item-description\",\n          children: event.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(Calendar, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","jsxDEV","_jsxDEV","Calendar","_s","fetchEvents","response","fetch","startDate","toISOString","split","endDate","ok","eventsData","json","setEvents","console","error","handleSubmit","event","preventDefault","eventData","title","description","start_date","end_date","emails","method","headers","body","JSON","stringify","alert","setTitle","setDescription","setStartDate","Date","setEndDate","setEmails","errorData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","plugins","initialView","height","events","map","start","end","toLocaleDateString","id","_c","$RefreshReg$"],"sources":["C:/Users/sunny.kasalawat/Desktop/LEVO ASSIGNMENT/frontend/src/Calendar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport './Calendar.css';\r\n\r\nfunction Calendar() {\r\n  // Fetch events based on the selected date range\r\n  useEffect(() => {\r\n    const fetchEvents = async () => {\r\n      try {\r\n        const response = await fetch(`http://127.0.0.1:5000/api/events?start_date=${startDate.toISOString().split('T')[0]}&end_date=${endDate.toISOString().split('T')[0]}`);\r\n        if (response.ok) {\r\n          const eventsData = await response.json();\r\n          setEvents(eventsData);\r\n        } else {\r\n          console.error('Failed to fetch events');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching events:', error);\r\n      }\r\n    };\r\n    fetchEvents();\r\n  }, [startDate, endDate]);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const eventData = {\r\n      title,\r\n      description,\r\n      start_date: startDate.toISOString().split('T')[0],\r\n      end_date: endDate.toISOString().split('T')[0],\r\n      emails\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:5000/api/events', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(eventData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('Event created successfully!');\r\n        setTitle('');\r\n        setDescription('');\r\n        setStartDate(new Date());\r\n        setEndDate(new Date());\r\n        setEmails('');\r\n        // Re-fetch events to include the newly created event\r\n        const fetchEvents = async () => {\r\n          try {\r\n            const response = await fetch(`http://127.0.0.1:5000/api/events?start_date=${startDate.toISOString().split('T')[0]}&end_date=${endDate.toISOString().split('T')[0]}`);\r\n            if (response.ok) {\r\n              const eventsData = await response.json();\r\n              setEvents(eventsData);\r\n            } else {\r\n              console.error('Failed to fetch events');\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching events:', error);\r\n          }\r\n        };\r\n        fetchEvents();\r\n      } else {\r\n        const errorData = await response.json();\r\n        alert(`Failed to create event: ${errorData.error}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"full-calendar-page\">\r\n    <div className=\"calendar-container\">\r\n      <h2 className=\"calendar-title\">Monthly Calendar</h2>\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        height=\"auto\"\r\n        events={events.map(event => ({\r\n          title: event.title,\r\n          start: event.start_date,\r\n          end: event.end_date,\r\n        }))}\r\n      />\r\n    </div>\r\n    <div className=\"event-list-container\">\r\n      <h2 className=\"event-list-title\">Event List</h2>\r\n      {events.map(event => (\r\n        <div key={event.id} className=\"event-list-item\">\r\n          <div className=\"event-list-item-title\">{event.title}</div>\r\n          <div className=\"event-list-item-date\">\r\n            {new Date(event.start_date).toLocaleDateString()} - {new Date(event.end_date).toLocaleDateString()}\r\n          </div>\r\n          <div className=\"event-list-item-description\">{event.description}</div>\r\n          \r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}